#!/bin/bash

function namespace_delete {
    source $1/openrc neutron service
    #Deletion namespace
    NFP_P=`sudo ip netns | grep "nfp-proxy"`
    if [ ${#NFP_P} -ne 0 ]; then
        sudo ip netns delete nfp-proxy
        echo "namespace removed"
    fi

    #Delete veth peer
    PEER=`ip a | grep pt1`
    if [ ${#PEER} -ne 0 ]; then
        echo "veth peer removed"
        sudo ip link delete pt1
    fi

    #pt1 port removing from ovs
    PORT=`sudo ovs-vsctl show | grep "pt1"`
    if [ ${#PORT} -ne 0 ]; then
        sudo ovs-vsctl del-port br-int pt1
        echo "ovs port ptr1 is removed"
    fi

    echo "nfp-proxy cleaning success.... "
}

function namespace_create {

    source $1/openrc neutron service
    SERVICE_MGMT_NET="l2p_svc_management_ptg"
    cidr="/24"
    echo "Creating new namespace nfp-proxy...."

    #new namespace with name proxy
    NFP_P=`sudo ip netns add nfp-proxy`
    if [ ${#NFP_P} -eq 0 ]; then
        echo "New namepace nfp-proxt create"
    else
        echo "nfp-proxy creation failed"
        exit 0
    fi

    #Create veth peer
    PEER=`sudo ip link add pt0 type veth peer name pt1`
    if [ ${#PEER} -eq 0 ]; then
        echo "New veth pair created"
    else
        echo "veth pair creation failed"
        exit 0
    fi
    sleep 1

    #move one side of veth into namesape
    sudo ip link set pt0 netns nfp-proxy

    #create new neutron port in service mgmt network
    new_ip=`neutron port-create $SERVICE_MGMT_NET | grep "fixed_ips" | awk '{print $7}' | sed 's/^\"\(.*\)\"}$/\1/'`
    if [ ${#new_ip} -lt 5 ]; then
        echo "new_ip =$new_ip"
        echo "Neutron port creation failed (check source) "
        exit 0
    else
        echo "New Neuteon Port Created on Service management network with ip =$new_ip"
    fi
    new_ip_cidr+="$new_ip/24"
    sleep 2

    #get the ip address of new port eg : 11.0.0.6 and asign to namespace
    sudo ip netns exec nfp-proxy ip addr add $new_ip_cidr dev pt0

    #move other side of veth into ovs : br-int
    sudo ovs-vsctl add-port br-int pt1

    #get id of service management network
    smn_id=`neutron net-list | grep "$SERVICE_MGMT_NET" | awk '{print $2}'`

    #get the dhcp namespace of service management network
    nm_space=`sudo ip netns | grep "$smn_id"`

    #get port id from router nampace
    port=`sudo ip netns exec $nm_space ip a | grep "tap" | tail -n 1 | awk '{print $7}'`

    #get tag_id  form port in ovs-bridge
    tag_id=`sudo ovs-vsctl list port $port | grep "tag" | tail -n 1 | awk '{print $3}'`

    sudo ovs-vsctl set port pt1 tag=$tag_id     

    #up the both ports 
    sudo ip netns exec nfp-proxy ip link set pt0 up
    sudo ip netns exec nfp-proxy ip link set lo up
    sudo ip link set pt1 up

    PING=`sudo ip netns exec nfp-proxy ping $2 -q -c 2 > /dev/null`
    if [ ${#PING} -eq 0 ]
    then
        echo "nfp-proxy namespcace creation success and reaching to $2"
    else
        echo "Fails reaching to $2" 
    fi

    sudo ip netns exec nfp-proxy /usr/bin/nfp_proxy --config-file=/etc/nfp_proxy.ini
}

function assign_user_role_credential {
    TOP_DIR=$1
    source $TOP_DIR/openrc admin admin
    #set -x
    serviceTenantID=`keystone tenant-list | grep "service" | awk '{print $2}'`
    serviceRoleID=`keystone role-list | grep "service" | awk '{print $2}'`
    adminRoleID=`keystone role-list | grep "admin" | awk '{print $2}'`
    keystone user-role-add --user nova --tenant $serviceTenantID --role $serviceRoleID
    keystone user-role-add --user neutron --tenant $serviceTenantID --role $adminRoleID
}

function create_ext_net {
    TOP_DIR=$1
    source $TOP_DIR/stackrc
    EXT_NET_NAME=$EXT_NET_NAME
    EXT_NET_SUBNET_NAME=$EXT_NET_SUBNET_NAME
    EXT_NET_GATEWAY=$EXT_NET_GATEWAY
    EXT_NET_ALLOCATION_POOL_START=$EXT_NET_ALLOCATION_POOL_START
    EXT_NET_ALLOCATION_POOL_END=$EXT_NET_ALLOCATION_POOL_END
    EXT_NET_CIDR=$EXT_NET_CIDR
    EXT_NET_MASK=$EXT_NET_MASK
    
    source $TOP_DIR/openrc neutron service
    neutron net-create --router:external=true --shared $EXT_NET_NAME
    neutron subnet-create --ip_version 4 --gateway $EXT_NET_GATEWAY --name $EXT_NET_SUBNET_NAME --allocation-pool start=$EXT_NET_ALLOCATION_POOL_START,end=$EXT_NET_ALLOCATION_POOL_END $EXT_NET_NAME $EXT_NET_CIDR/$EXT_NET_MASK
    subnet_id=`neutron net-list | grep "$EXT_NET_NAME" | awk '{print $6}'`

}

function create_nfp_gbp_resources {
   
   TOP_DIR=$1
   source $TOP_DIR/openrc neutron service
   gbp network-service-policy-create --network-service-params type=ip_pool,name=vip_ip,value=nat_pool svc_mgmt_fip_policy

   gbp service-profile-create --servicetype LOADBALANCER --insertion-mode l3 --shared True --service-flavor service_vendor=haproxy,device_type=nova --vendor NFP lb_profile
   gbp service-profile-create --servicetype FIREWALL --insertion-mode l3 --shared True --service-flavor service_vendor=vyos,device_type=nova --vendor NFP fw_profile

   gbp service-profile-create --servicetype VPN --insertion-mode l3 --shared True --service-flavor service_vendor=vyos,device_type=nova --vendor NFP vpn_profile

   gbp group-create svc_management_ptg --service_management True

}

function upload_images_and_launch_configuratorVM {
    
    TOP_DIR=$1
    source $TOP_DIR/openrc neutron service
    ConfiguratorQcow2ImageName=$2
    VyosQcow2Image=$3
    HaproxyQcow2Image=$4
    ConfiguratorImageName=configurator
    VyosImageName=vyos
    HaproxyImageName=haproxy
    if [ ! -z "$1" -a "$1" != " " ]; then
        echo "Uploading Image : $ConfiguratorImageName"
        glance image-create --name $ConfiguratorImageName --disk-format qcow2  --container-format bare  --visibility public --file $ConfiguratorQcow2ImageName
        echo "Uploading Image : $VyosImageName"
        glance image-create --name $VyosImageName --disk-format qcow2  --container-format bare  --visibility public --file $VyosQcow2Image
        echo "Uploading Image : $HaproxyImageName"
        glance image-create --name $HaproxyImageName --disk-format qcow2  --container-format bare  --visibility public --file $HaproxyQcow2Image
    else
        echo "ImageName not provided ..."
        exit
    fi

    InstanceName="configuratorVM_instance"

    GROUP="svc_management_ptg"
    echo "GroupName: $GROUP"
    PortId=$(gbp policy-target-create --policy-target-group $GROUP $InstanceName | grep port_id  | awk '{print $4}')

    echo "Collecting ImageId : for $ConfiguratorImageName"
    ImageId=`glance image-list|grep $ConfiguratorImageName |awk '{print $2}'`
    if [ ! -z "$ImageId" -a "$ImageId" != " " ]; then
        echo $ImageId
    else
        echo "No image found with name $ConfiguratorImageName ..."
        exit
    fi

    nova boot --flavor m1.medium --image $ImageId --nic port-id=$PortId $InstanceName
    sleep 10

    l2p_id=`gbp ptg-show svc_management_ptg | grep l2_policy_id | awk '{print $4}'`
    l3p_id=`gbp l2p-show $l2p_id | grep l3_policy_id | awk '{print $4}'`
    RouterId=`gbp l3p-show $l3p_id | grep routers | awk '{print $4}'`

    echo "Collecting RouterId : for $RouterName"
    if [ ! -z "$RouterId" -a "$RouterId" != " " ]; then
        echo $RouterId
    else
        echo "Router creation failed with $RouterName ..."
        exit
    fi

    echo "Get IpAddr with port: $PortId"
    IpAddr_extractor=`neutron port-list|grep $PortId|awk '{print $11}'`
    IpAddr_purge_last=${IpAddr_extractor::-1}
    IpAddr=${IpAddr_purge_last//\"/}
    echo "Collecting IpAddr : for $PortId"
    echo $IpAddr


}

function nfp_logs_forword {
    VISIBILITY_CONF="/etc/rsyslog.d/visibility.conf"
    SYSLOG_CONFIG="/etc/rsyslog.conf"
    log_facility=local1

    sudo sed -i '/#$ModLoad imudp/ s/^#//' $SYSLOG_CONFIG
    sudo sed -i '/#$UDPServerRun 514/ s/^#//' $SYSLOG_CONFIG
    echo "Successfully enabled UDP in syslog"

    visibility_vm_ip_address=$IpAddr
    echo "$log_facility.*                @$visibility_vm_ip_address:514" | sudo tee -a $VISIBILITY_CONF
    echo "Created $VISIBILITY_CONF file" 

    sudo service rsyslog restart
    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to restart rsyslog"
    fi 

}
function remove_nfp_logs_forword {
    VISIBILITY_CONF="/etc/rsyslog.d/visibility.conf"
    SYSLOG_CONFIG="/etc/rsyslog.conf"

    sudo sed -i '/$ModLoad imudp/ s//#$ModLoad imudp/' $SYSLOG_CONFIG
    sudo sed -i '/$UDPServerRun 514/ s//#$UDPServerRun 514/' $SYSLOG_CONFIG
    sudo echo "Successfully disabled UDP in syslog"

    sudo rm -f $VISIBILITY_CONF
    echo "Deleted $VISIBILITY_CONF file" 

    sudo service rsyslog restart
    if [ $? -ne 0 ]; then
       echo "ERROR: Failed to restart rsyslog"
    fi 

}
function copy_nfp_files_and_start_process {

    TOP_DIR=$1
    cd /opt/stack/gbp/gbpservice/nfp
    sudo cp -r  bin/nfp /usr/bin/
    sudo chmod +x /usr/bin/nfp
    sudo rm -rf /etc/nfp_*
    sudo cp -r  bin/nfp_orch_agent.ini /etc/
    sudo cp -r  bin/nfp_proxy_agent.ini /etc/
    sudo cp -r  bin/nfp_config_orch.ini /etc/
    sudo cp -r  bin/proxy.ini /etc/nfp_proxy.ini
    sudo cp -r  bin/nfp_proxy /usr/bin/


    echo "Configuring proxy.ini .... with rest_server_address as $IpAddr"
    sudo sed -i "s/rest_server_address=*.*/rest_server_address=$IpAddr/g" /etc/nfp_proxy.ini
    sudo sed -i "s/rest_server_port= *.*/rest_server_port=8070/g" /etc/nfp_proxy.ini
    ipnetns_router=`sudo ip netns |grep $RouterId`

    source $TOP_DIR/functions-common

    echo "Starting orchestrator  >>>> under screen named : orchestrator"
    run_process orchestrator "sudo /usr/bin/nfp  --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini --config-file /etc/nfp_orch_agent.ini --log-file /opt/stack/logs/nfp_orchestrator.log"
    sleep 1

    echo "Starting proxy_agent  >>>> under screen named : proxy_agent"
    run_process proxy_agent "sudo /usr/bin/nfp --config-file /etc/nfp_proxy_agent.ini --log-file /opt/stack/logs/nfp_proxy_agent.log"
    sleep 1

    echo "Starting proxy server under Namespace : nfp-proxy namespace >>>> under screen named : proxy"
    run_process proxy "source $TOP_DIR/lib/nfp;namespace_delete $TOP_DIR;namespace_create $TOP_DIR $IpAddr"
    sleep 10

    echo "Starting config_orch  >>>> under screen named : config_orch"
    run_process config_orch "sudo /usr/bin/nfp  --config-file /etc/nfp_config_orch.ini --config-file /etc/neutron/neutron.conf --log-file /opt/stack/logs/nfp_config_orch.log"
    sleep 1

    echo "Running gbp-db-manage"

    source $TOP_DIR/openrc neutron service

    gbp-db-manage --config-file /etc/neutron/neutron.conf upgrade head
    sleep 2
    echo "Configuration success ... "

}

function configure_nfp_firewall {
    echo "Configuring NFP Firewall plugin"
    sudo cp -r /opt/stack/gbp/gbpservice/nfp/Automation-Scripts/oc_noop_firewall_driver /opt/stack/neutron-fwaas/neutron_fwaas/services/firewall/drivers/linux/.
    sudo sed -i "s/neutron_fwaas.services.firewall.fwaas_plugin.FirewallPlugin/gbpservice.nfp.service_plugins.firewall.nfp_fwaas_plugin.NFPFirewallPlugin/g" /etc/neutron/neutron.conf
}

function configure_nfp_vpn {
    echo "Configuring NFP VPN plugin driver"

    sudo sed -i "s/service_provider\ *=\ *VPN:openswan:neutron_vpnaas.services.vpn.service_drivers.ipsec.IPsecVPNDriver:default/service_provider\ =\ VPN:openswan:neutron_vpnaas.services.vpn.service_drivers.ipsec.IPsecVPNDriver\nservice_provider\ =\ VPN:vpn:gbpservice.nfp.service_plugins.vpn.drivers.nfp_vpnaas_driver.NFPIPsecVPNDriver:default/g" /etc/neutron/neutron_vpnaas.conf
}

function configure_nfp_loadbalancer {
    echo "Configuring NFP Loadbalancer plugin driver"
    sudo sed -i "s/service_provider\ *=\ *LOADBALANCER:Haproxy:neutron_lbaas.services.loadbalancer.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver:default/service_provider\ =\ LOADBALANCER:Haproxy:neutron_lbaas.services.loadbalancer.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver\nservice_provider\ =\ LOADBALANCER:loadbalancer:gbpservice.nfp.service_plugins.loadbalancer.drivers.nfp_lbaas_plugin_driver.HaproxyOnVMPluginDriver:default/g" /etc/neutron/neutron_lbaas.conf
}

function configure_nfp_basic.sh {
    assign_user_role_credential $1
    create_ext_net $1
}

function nfp_setup {
    configure_nfp_basic.sh $1 
    create_nfp_gbp_resources $1
    upload_images_and_launch_configuratorVM $1 $2 $3 $4
    nfp_logs_forword
    copy_nfp_files_and_start_process $1
}